#!/bin/bash
# Copyright (c) 2018 Spartaco Amadei <spamadei@gmail.com>
# This program is free software: you can redistribute it and/or modify #
# it under the terms of the GNU General Public License as published by #
# the Free Software Foundation, either version 3 of the License, or    #
# (at your option) any later version.                                  #
#                                                                      #
# This program is distributed in the hope that it will be useful,      # 
# but WITHOUT ANY WARRANTY; without even the implied warranty of       #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #
# GNU General Public License for more details.                         #
#                                                                      #
# You should have received a copy of the GNU General Public License    #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.#
#
# pAURa, pacman AUR automatization: The new AUR helper that minimizes user interaction
#
LibDir='/usr/lib/libpaura'
Author="rez23"														              
version="alpha1" 
github="https://github.com/rez23/paura.git"
############################################################################
################################################################# CONFIG ####
############################################################################
# Determine config location
configDir="${XDG_CONFIG_DIRS:-/etc/xdg}/paura"
userconfigDir="${XDG_CONFIG_HOME:-${HOME}/.config}/paura" #in the next I make the ability to configure custom config file
userpacmanDir="${XDG_CONFIG_HOME:-${HOME}/.config}/pacman"
usercacheDir="${XDG_CACHE_HOME:-${HOME}/.cache}/paura"
tmpDir="${XDG_RUNTIME_DIR:-/tmp}"
# Initialize paura folder hiteracy
[[ ! -e $userconfigDir ]] && mkdir -p $userconfigDir
[[ ! -e $usercacheDir ]] && mkdir -p $usercacheDir
# base var 
pacmanbin="${PACMAN:-pacman}"
clonedir="${AURDEST:-$usercacheDir}/packages"
[[ ! -e $clonedir ]] && mkdir $clonedir
###
###
#####
# Lib
source  /usr/share/makepkg/util/message.sh
source ${LibDir}/libsearch.sh
source ${LibDir}/libsync.sh
source ${LibDir}/libutils.sh
###
# Function
###
if_close_exit(){
if [[ $? != 0 ]]; then
	error "Interrupt signal from user. Aborting..."
	exit 1
fi
}
not_implemented_yet(){
	error "Sorry, this function isn ultimated yet..."
	echo "This program is in alpha stage, read the paura(1) man page for info..."
	echo "If you wont help visit:${github}"
	}
SyncPaura(){
	echo "*********************"
	echo "**      pAURa     ****"
	echo "*********************"
	case ${OPTARG} in
		y | *y | y* )
			test_pkg
			[[ ${OPTARG} != ${package[0]} ]] && sudo pacman -S${OPTARG} ${corepackage[*]}
			[[ -z ${package} ]] && msg "Done!" && exit 0
			;;
		u | *u | u*)
			test_pkg
			[[ ${OPTARG} != ${package[0]} ]] && sudo pacman -S${OPTARG} ${corepackage[*]}
			sysupgrade=1
			;;
		${package[0]}) 
			msg3 "Searching packages..."
			test_pkg
			[[ -n ${corepackage} ]] && sudo pacman -S ${corepackage[*]}
			;;
		*)
					echo "$OPTARG isn't supported option"
					echo "use -h | --help for some available options"
				;;
		esac
	if [[ -n ${notfoundpkg} ]]; then
			error "cant find ${notfoundpkg[*]}"
			exit 1
	fi
	get_pkg
  install_pkg
		if [[ $? == 0 ]]; then
			msg "All packages are installed sucessfully"
		else
			error "An error as occured no packages will be installed" 
			exit 1
		fi
}
localpackage(){
	cd ${OPTARG}
	all_depends=(`cat .SRCINFO|  awk '{if(/depends/) print $3}'`
							`cat .SRCINFO|  awk '{if(/makedepends/) print $3}'`)
	while [[ -n ${all_depends[$i]} ]]; do
		if [[ -e ${clonedir}/${all_depends[$i]} ]]; then
			cd ${clonedir}/${all_depends[$i]}
			makepkg -si
		fi
		i=$((++i))
	done
	pkgbase=`cat .SRCINFO | awk '{if(/pkgbase/) print $3}'`
	echo "Installing ${pkgbase}"
	makepkg -si
	unset i
}
# OPTION

# Main
colorize
#echo "************************"
#msg "Starting pAURa... **"
#echo "************************"
sleep 1
# # # # # #
# Option  
# # # # # 
	while getopts ":S:R:Q:U:hvsq-:" opt; do
	shift 1
	declare -a package
	package=($*)
	case ${opt} in 
	# Longoptions
		-)												
			case ${OPTARG} in 
				help)
					helpfunct
					;;
				version)
					paurainfo
					;;
				search)
					shift 
					if [[ $1 == "-q" ]]; then
						shift 1 
						package=$1
						$OPTARG="sq"
					fi
					pkg_search
					;;
				testfunction)
					test_pkg
					echo "core ${corepackage[*]}"
	        echo "aur ${aurpackage[*]}"
					;;
				a-christmas-song)
					christmas_song
					;;
				downloadonly)
					echo "*********************"
					echo "**      pAURa     ****"
					echo "*********************"
					msg3 "Download only mode"
					test_pkg
					if [[ -n ${corepackage} ]]; then
						error "download only mode can be used only with aur packages"
						echo "run pacman or paura in sync mode (-S) for install core packages"
						exit 1
					fi
					if [[ $1 == -l ]]; then
						auracle download ${aurpackage[*]}
					else
						get_pkg
					fi
					;;
				install)
					echo "*********************"
					echo "**      pAURa     ****"
					echo "*********************"
					msg3 "Installing mode"
					while getopts "p:" installopt; do
						case ${installopt} in
							p)
								localpackage
								exit 0
								;;
							?)
								echo "passed unsopported option"
								echo "for install specific aur package use -p <path> "
								;;
							esac
						done
							install_pkg
							if [[ $? != 0 ]]; then
								error "No packages found..."
								exit 1
							fi
					;;
				upgrade)
					sysupgrade=1
					msg3 "Start system upgrade"
					test_pkg
					sudo pacman -Syyu ${corepackage[*]}
					get_pkg
					install_pkg
					;;
				sync)
					msg3 "Searching packages..."
					test_pkg
					sudo pacman -Syy ${corepackage[*]}
					get_pkg
					install_pkg
					;;
				cleancache)
				verboseCacheclean
					;;	
				*)
					echo "--${OPTARG} isn't a supported option"
			    echo "Usage: "
					echo "paura [option] <package> <package>"
					echo "use -h | --help for a list of option"
					;;
				esac
			;;
		"S" )
			case ${OPTARG} in
				"s" | "sq" )
				pkg_search
				;;
				"c")
					cleanCahe			
					;;
				"i")
					test_pkg
					[[ -n ${corepackage} ]] && pacman -Si ${corepackage}
					[[ -n ${aurpackage} ]] && auracle info ${aurpackage}
				;;
				* )
					SyncPaura
				;;
				
			esac
		;;
		"R")
			sudo pacman -$opt $package
			;;
		"v")
			paurainfo
			;;
		'h') 
			helpfunct
			;;
		"U")
			echo "*********************"
			echo "**      pAURa     ****"
			echo "*********************"
			msg3 "Installing mode"
			if [[ ${OPTARG} == *.pkg.tar.xz ]]; then
				pacman -U ${OPTARG}
			else
				localpackage
			fi
			;;
		?)
			echo "${OPTARG} isn't a supported option"
			echo "Usage: "
			echo "paura [option] <package> <package>"
			echo "use -h | --help for a list of option"
			;;
		:)
			echo "${OPTARG} required an arguments!"
			echo "use --help or se paura(1) man page for more info"
			;;
	esac
done
			
